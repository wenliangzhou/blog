<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周文亮</title>
  
  <subtitle>合理疯狂，疯狂合理</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhouwenliang.com/"/>
  <updated>2020-01-03T03:52:06.080Z</updated>
  <id>http://www.zhouwenliang.com/</id>
  
  <author>
    <name>周文亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>待了解技术</title>
    <link href="http://www.zhouwenliang.com/%E5%BE%85%E4%BA%86%E8%A7%A3%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.zhouwenliang.com/待了解技术/</id>
    <published>2019-12-25T10:27:40.000Z</published>
    <updated>2020-01-03T03:52:06.080Z</updated>
    
    <content type="html"><![CDATA[<p>通用sdk类产品</p><ol><li>JSBridge</li><li>埋点sdk</li><li>性能分析sdk</li></ol><p><a href="https://huodong.m.taobao.com/act/layouttestvw.html" target="_blank" rel="noopener">https://huodong.m.taobao.com/act/layouttestvw.html</a></p><p>质能方程<script type="math/tex">E = mc^2</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通用sdk类产品&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSBridge&lt;/li&gt;
&lt;li&gt;埋点sdk&lt;/li&gt;
&lt;li&gt;性能分析sdk&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://huodong.m.taobao.com/act/layouttestvw.html&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端适配方案</title>
    <link href="http://www.zhouwenliang.com/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://www.zhouwenliang.com/移动端适配方案/</id>
    <published>2019-12-24T13:45:33.000Z</published>
    <updated>2019-12-25T01:23:19.374Z</updated>
    
    <content type="html"><![CDATA[<p>适配方案的解析。</p><h3 id="lib-flexible-方案："><a href="#lib-flexible-方案：" class="headerlink" title="lib-flexible 方案："></a>lib-flexible 方案：</h3><h4 id="方案原理"><a href="#方案原理" class="headerlink" title="方案原理"></a>方案原理</h4><p>根据视口设置html <code>font-size</code>使用<code>rem</code> 达到百分比布局的效果,配合熟悉<code>dpr</code>适配文字图片。</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li>文字能够很好的适配。 直接使用px单位，结合data-dpr 属性编写兼容css，屏幕尺寸够大能够显示更多的文字且各个屏幕文字大小差不多。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@mixin font-dpr($font-size)&#123; </span><br><span class="line">  font-size: $font-size; </span><br><span class="line">  [data-dpr=&quot;2&quot;] &amp; &#123; </span><br><span class="line">    font-size: $font-size * 2; </span><br><span class="line">  &#125; </span><br><span class="line">  [data-dpr=&quot;3&quot;] &amp; &#123; </span><br><span class="line">    font-size: $font-size * 3; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@include font-dpr(16px);</span><br></pre></td></tr></table></figure><ol><li>处理1px问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.setTopLine(@c: #C7C7C7) &#123;</span><br><span class="line">  &amp; &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    border-top: 1px solid @c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [data-dpr=&quot;1&quot;] &amp;:before &#123;</span><br><span class="line">    transform-origin: 0 0;</span><br><span class="line">    transform: scaleY(0.5);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*照着这个可以再写setBottomLine等相关mixin*/</span><br><span class="line"></span><br><span class="line">1）它会占用掉before伪类</span><br><span class="line"></span><br><span class="line">2）没法做圆角</span><br><span class="line"></span><br><span class="line">3）很难实现多条边框，除非嵌套，或者再利用上after伪类。</span><br></pre></td></tr></table></figure></li></ol><h4 id="缺点雪碧图"><a href="#缺点雪碧图" class="headerlink" title="缺点雪碧图"></a>缺点雪碧图</h4><p>由于rem转换成px有小数点的存在所以雪碧图的定位不是太准确。</p><h3 id="vw适配方案"><a href="#vw适配方案" class="headerlink" title="vw适配方案"></a>vw适配方案</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>简单</p><ol><li>使用vw来实现页面的适配，并且通过PostCSS的插件postcss-px-to-viewport2把px转换成vw。这样的好处是，我们在撸码的时候，不需要进行任何的计算，你只需要根据设计图写px单位</li><li>为了更好的实现长宽比，特别是针对于img、vedio和iframe元素，通过PostCSS插件postcss-aspect-ratio-mini来实现，在实际使用中，只需要把对应的宽和高写进去即可</li><li>为了解决1px的问题，使用PostCSS插件postcss-write-svg,自动生成border-image或者background-image的图片</li></ol><blockquote><p>如果你想系统的学习PostCSS相关的知识，推荐你购买<code>《深入PostCSS Web设计》</code>一书：著作权归作者所有。</p></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>兼容性，不好，但大多数已经支持</li><li>另外一点，px转换成vw单位，多少还会存在一定的像素差，毕竟很多时候无法完全整除。</li><li>有一些细节之处还是存在一定的缺陷的。比如当容器使用vw单位，margin采用px单位时，很容易造成整体宽度超过100vw，从而影响布局效果。对于类似这样的现象，我们可以采用相关的技术进行规避。比如将margin换成padding，并且配合box-sizing。只不过这不是最佳方案</li></ol><h4 id="降级处理"><a href="#降级处理" class="headerlink" title="降级处理"></a>降级处理</h4><ol><li><code>CSS Houdini</code>：通过<a href="https://github.com/w3c/css-houdini-drafts/wiki" target="_blank" rel="noopener">CSS Houdini</a>针对vw做处理，调用<a href="https://www.w3.org/TR/css-typed-om-1" target="_blank" rel="noopener">CSS Typed OM Level1</a> 提供的<a href="https://www.w3.org/TR/css-typed-om-1/#numericvalue-serialization" target="_blank" rel="noopener">CSSUnitValue API</a>。</li><li><code>CSS Polyfill</code>:通过相应的Polyfill做相应的处理，目前针对于vw单位的Polyfill主要有：vminpoly、Viewport Units Buggyfill、vunits.js和Modernizr。个人推荐采用<a href="https://github.com/rodneyrehm/viewport-units-buggyfill" target="_blank" rel="noopener">Viewport Units Buggyfill</a></li></ol><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><p><a href="https://www.w3cplus.com/mobile/vw-layout-in-vue.html" target="_blank" rel="noopener">如何在Vue项目中使用vw实现移动端适配</a></p><pre><code>参考至：https://www.w3cplus.com/css/vw-for-layout.htmlhttps://www.cnblogs.com/lyzg/p/5117324.html</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;适配方案的解析。&lt;/p&gt;
&lt;h3 id=&quot;lib-flexible-方案：&quot;&gt;&lt;a href=&quot;#lib-flexible-方案：&quot; class=&quot;headerlink&quot; title=&quot;lib-flexible 方案：&quot;&gt;&lt;/a&gt;lib-flexible 方案：&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>晨间日记 (第一轮)</title>
    <link href="http://www.zhouwenliang.com/%E6%97%A5%E8%AE%B0/"/>
    <id>http://www.zhouwenliang.com/日记/</id>
    <published>2019-12-23T01:22:54.000Z</published>
    <updated>2020-01-06T08:36:02.577Z</updated>
    
    <content type="html"><![CDATA[<p>主要承诺：每天写一篇日记。</p><p>开始时间：2019-12-23</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>让自己有个计划，好去全世界看看。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>每天写一篇日记，内容可短，可重复，如果看了有看了文章的心得也会再次总结。</li><li>我将在这里跟踪我的进展并推送给GitHub。</li><li>如果出现重要的事情，我会跳过这一天不算在100天之中。</li></ol><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ol><li>1天<blockquote><p>  启动日记的编写<br>前端MAP <img src="https://752758299-1300378859.cos.ap-shanghai.myqcloud.com/web-%E5%85%A8%E6%A0%88.png" alt="前端MAP"></p></blockquote></li><li>7天</li><li>30天</li><li>60天</li><li>90天</li><li>100天</li></ol><h3 id="额外的补充"><a href="#额外的补充" class="headerlink" title="额外的补充"></a>额外的补充</h3><ul><li>不要连续两天跳过，并且两周之内跳过一天</li></ul><h3 id="日志模板"><a href="#日志模板" class="headerlink" title="日志模板"></a>日志模板</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>## 第N天</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 昨天的进步</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 思想和情绪</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 今天的计划</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="第1天-2019年12月23日"><a href="#第1天-2019年12月23日" class="headerlink" title="第1天 2019年12月23日"></a>第1天 2019年12月23日</h3><h4 id="昨天的进步"><a href="#昨天的进步" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>制定今天的日记计划</p><h4 id="思想和情绪"><a href="#思想和情绪" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>早晨看了一篇文章。<a href="https://mp.weixin.qq.com/s/j8FjzxTGZiivHEfJpQTxWg" target="_blank" rel="noopener">别让自己‘墙了自己’</a><br>感觉看完自己很有斗志，多看看这样的文章挺好。</p><blockquote><p>文章总结</p></blockquote><pre><code>1.敢想2.视野的重要性3.英语对于开阔视野的重要性4.学习技术不要太偏执，技多不压身，学习一门语言应该有逻辑的思考整个架构模型、设计模式，站在整个技术的上帝视角来学习技术。5.看完之后觉得自己好年轻。。。（重点.jpg）</code></pre><h4 id="今天的计划"><a href="#今天的计划" class="headerlink" title="今天的计划"></a>今天的计划</h4><ol><li><a href="https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html?expire=1576460340&amp;code=ucIZMnfCpjc&amp;sign=bb90f5b4ec095455fe17071132816ebd#paywall" target="_blank" rel="noopener">详细了解移动端适配原理</a></li><li>自考本科高数段的学习。</li><li>Vue源码的视频课程学习。</li></ol><hr><h3 id="第2天-2019年12月24日"><a href="#第2天-2019年12月24日" class="headerlink" title="第2天 2019年12月24日"></a>第2天 2019年12月24日</h3><h4 id="昨天的进步-1"><a href="#昨天的进步-1" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>理解CSS基于物理尺寸一样原理，文字适配，图片适配。</p><h4 id="思想和情绪-1"><a href="#思想和情绪-1" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>对于昨天理解移动端适配还有一点不懂，今天打算直接看源码理解。然后写一篇总结文章。<br>总的来说，没有完成昨天的计划，但在以后的计划规划中要注意合理性。</p><h4 id="今天的计划-1"><a href="#今天的计划-1" class="headerlink" title="今天的计划"></a>今天的计划</h4><p>1.继续了解适配原理，写一篇总结文章。<br>2.高数学习</p><hr><h3 id="第3天-2019年12月25日"><a href="#第3天-2019年12月25日" class="headerlink" title="第3天 2019年12月25日"></a>第3天 2019年12月25日</h3><h4 id="昨天的进步-2"><a href="#昨天的进步-2" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>理解lib-flexible方案的缺点，和vw适配方案。<br>完成<a href="https://www.zhouwenliang.com/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/#more">移动端适配的总结</a></p><h4 id="思想和情绪-2"><a href="#思想和情绪-2" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>昨天对移动方案的理解还不错，高数暂时搁置。</p><h4 id="今天的计划-2"><a href="#今天的计划-2" class="headerlink" title="今天的计划"></a>今天的计划</h4><p>了解vw的文字适配，Vue源码的学习。<br>高数的学习。</p><hr><h3 id="第4天-2019年12月26日"><a href="#第4天-2019年12月26日" class="headerlink" title="第4天 2019年12月26日"></a>第4天 2019年12月26日</h3><h4 id="昨天的进步-3"><a href="#昨天的进步-3" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>vw方案文字适配文字是整体放大，没有学习Vue源码，改变计划学习typecript</p><h4 id="思想和情绪-3"><a href="#思想和情绪-3" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>需要加强效率，合理安排计划，不是很满意。</p><h4 id="今天的计划-3"><a href="#今天的计划-3" class="headerlink" title="今天的计划"></a>今天的计划</h4><p>学习typeScript和ES6</p><hr><h3 id="第5天-2019年12月27日"><a href="#第5天-2019年12月27日" class="headerlink" title="第5天 2019年12月27日"></a>第5天 2019年12月27日</h3><h4 id="昨天的进步-4"><a href="#昨天的进步-4" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>学习高数曲面方程  </p><h4 id="思想和情绪-4"><a href="#思想和情绪-4" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>高数还是需要花时间的，希望啃下来。</p><h4 id="今天的计划-4"><a href="#今天的计划-4" class="headerlink" title="今天的计划"></a>今天的计划</h4><p>学习高数，学习typeScipt</p><hr><h3 id="第6天-2019年12月30日"><a href="#第6天-2019年12月30日" class="headerlink" title="第6天 2019年12月30日"></a>第6天 2019年12月30日</h3><h4 id="昨天的进步-5"><a href="#昨天的进步-5" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>周末HI了两天。 余年庆挺好看的。  </p><h4 id="思想和情绪-5"><a href="#思想和情绪-5" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>呀，很难受没坚持下来，特别是作息没坚持下来。</p><h4 id="今天的计划-5"><a href="#今天的计划-5" class="headerlink" title="今天的计划"></a>今天的计划</h4><p>学习高数，学习typeScipt</p><hr><h3 id="第7天-2020年1月3日"><a href="#第7天-2020年1月3日" class="headerlink" title="第7天 2020年1月3日"></a>第7天 2020年1月3日</h3><h4 id="昨天的进步-6"><a href="#昨天的进步-6" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>学习了一小时数学。曲线旋转方程<br>在<code>Oyz</code>平面的曲线围绕Z旋转<br>因为</p><blockquote><p>曲线<script type="math/tex">f(y,z)=0</script></p></blockquote><p>又</p><blockquote><p>旋转中的一点p*的z坐标不变且相交于Z轴M，<script type="math/tex">|MP| = \sqrt{x^2+y^2}</script></p></blockquote><p>又</p><blockquote><p>p<em>在曲线C上,$$f(|MP|=|MP</em>|) $$ </p></blockquote><p>所以</p><blockquote><p>满足<script type="math/tex">f(p*,z)</script></p></blockquote><p>所以</p><blockquote><p>旋转曲面上的点满足  <script type="math/tex">f(\pm\sqrt{x^2+y^2},z)</script> </p></blockquote><h4 id="思想和情绪-6"><a href="#思想和情绪-6" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><p>新年flag:</p><ol><li>养成好的睡眠习惯</li><li>再想想</li></ol><h4 id="今天的计划-6"><a href="#今天的计划-6" class="headerlink" title="今天的计划"></a>今天的计划</h4><p>学习高数，学习typeScipt</p><hr><h3 id="第8天-2020年1月6日"><a href="#第8天-2020年1月6日" class="headerlink" title="第8天 2020年1月6日"></a>第8天 2020年1月6日</h3><h4 id="昨天的进步-7"><a href="#昨天的进步-7" class="headerlink" title="昨天的进步"></a>昨天的进步</h4><p>《习惯的力量》</p><blockquote><p>习惯三要素：线索、行为、奖赏</p></blockquote><pre><code>线索：地点、心情、心态、上下文，这些会引导自己做出相应行为。行为：某些习惯需要的动作。奖赏：分自然奖赏和设计规则奖赏</code></pre><h4 id="思想和情绪-7"><a href="#思想和情绪-7" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><pre><code>一定要完成养成早睡早起的习惯，让自己变得从容。</code></pre><h4 id="今天的计划-7"><a href="#今天的计划-7" class="headerlink" title="今天的计划"></a>今天的计划</h4><pre><code>1. 跑步。2. 配置个人博客服务器3. 地铁上学习typeScript</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要承诺：每天写一篇日记。&lt;/p&gt;
&lt;p&gt;开始时间：2019-12-23&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;让自己有个计划，好去全世界看看。&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="100天挑战" scheme="http://www.zhouwenliang.com/categories/100%E5%A4%A9%E6%8C%91%E6%88%98/"/>
    
      <category term="晨间日记" scheme="http://www.zhouwenliang.com/categories/100%E5%A4%A9%E6%8C%91%E6%88%98/%E6%99%A8%E9%97%B4%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="100天挑战" scheme="http://www.zhouwenliang.com/tags/100%E5%A4%A9%E6%8C%91%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>本科自考 (第一轮)</title>
    <link href="http://www.zhouwenliang.com/100%E5%A4%A9%E8%87%AA%E8%80%83%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    <id>http://www.zhouwenliang.com/100天自考倒计时/</id>
    <published>2019-12-23T01:12:54.000Z</published>
    <updated>2019-12-23T04:46:33.546Z</updated>
    
    <content type="html"><![CDATA[<p>主要承诺：每天进行自考教材的学习。</p><p>开始时间：2019-12-23</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>需要自考一个计算机本科。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>每天进行规定自考教材的学习</li><li>我将在这里跟踪我的进展并推送给GitHub。</li><li>如果出现重要的事情，我会跳过这一天不算在100天之中。</li></ol><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ol><li>1天<blockquote><p>启动高数的学习</p></blockquote></li><li>7天</li><li>30天</li><li>60天</li><li>90天</li><li>100天</li></ol><h3 id="额外的补充"><a href="#额外的补充" class="headerlink" title="额外的补充"></a>额外的补充</h3><ul><li>不要连续两天跳过，并且两周之内跳过一天</li></ul><h3 id="日志模板"><a href="#日志模板" class="headerlink" title="日志模板"></a>日志模板</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>## 第N天</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 今天的进步</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 思想和情绪</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 明天的计划</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>```</p><h3 id="第1天"><a href="#第1天" class="headerlink" title="第1天"></a>第1天</h3><h4 id="今天的进步"><a href="#今天的进步" class="headerlink" title="今天的进步"></a>今天的进步</h4><h4 id="思想和情绪"><a href="#思想和情绪" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><h4 id="明天的计划"><a href="#明天的计划" class="headerlink" title="明天的计划"></a>明天的计划</h4><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要承诺：每天进行自考教材的学习。&lt;/p&gt;
&lt;p&gt;开始时间：2019-12-23&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;需要自考一个计算机本科。&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="100天挑战" scheme="http://www.zhouwenliang.com/categories/100%E5%A4%A9%E6%8C%91%E6%88%98/"/>
    
      <category term="自考" scheme="http://www.zhouwenliang.com/categories/100%E5%A4%A9%E6%8C%91%E6%88%98/%E8%87%AA%E8%80%83/"/>
    
    
      <category term="100天挑战" scheme="http://www.zhouwenliang.com/tags/100%E5%A4%A9%E6%8C%91%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>scss</title>
    <link href="http://www.zhouwenliang.com/scss/"/>
    <id>http://www.zhouwenliang.com/scss/</id>
    <published>2019-10-21T07:32:35.487Z</published>
    <updated>2020-01-06T02:44:38.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量-variables"><a href="#变量-variables" class="headerlink" title="变量 - variables"></a>变量 - variables</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套-nesting"><a href="#嵌套-nesting" class="headerlink" title="嵌套 - nesting"></a>嵌套 - nesting</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: red;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  &amp;<span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套式调用父选择器"><a href="#嵌套式调用父选择器" class="headerlink" title="嵌套式调用父选择器"></a>嵌套式调用父选择器</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">font</span> : &#123;</span><br><span class="line">    size:<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合-mixins"><a href="#混合-mixins" class="headerlink" title="混合 - mixins"></a>混合 - mixins</h3><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><ol><li>默认值</li><li>关键词参数</li><li>参数变量</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> name (param1,param2...)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  默认值</span></span><br><span class="line">@<span class="keyword">mixin</span> border (<span class="variable">$width</span>:<span class="number">1px</span>,<span class="variable">$color</span>:green)&#123;</span><br><span class="line">  <span class="attribute">border</span> :&#123;</span><br><span class="line">    color:color,</span><br><span class="line">    width:width</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">  @include border (<span class="number">12px</span>,red);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> border (<span class="variable">$color</span>:red);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数列表</span></span><br><span class="line"><span class="comment">// 可以使用参数变量 … 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理</span></span><br><span class="line">@<span class="keyword">mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> box-shadow(<span class="number">0px</span> 4px 5px <span class="number">#666</span>, 2px 6px 10px <span class="number">#999</span>);</span><br><span class="line"><span class="comment">// 参数变量也可以用在引用混合指令的时候 (@include)，与平时用法一样，将一串值列表中的值逐条作为参数引用：</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> colors(<span class="variable">$text</span>, <span class="variable">$background</span>, <span class="variable">$border</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$background</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$border</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$values</span>: <span class="number">#ff0000</span>, <span class="number">#00ff00</span>, <span class="number">#0000ff</span>;</span><br><span class="line"><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> colors(<span class="variable">$values</span>...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量-variables&quot;&gt;&lt;a href=&quot;#变量-variables&quot; class=&quot;headerlink&quot; title=&quot;变量 - variables&quot;&gt;&lt;/a&gt;变量 - variables&lt;/h3&gt;&lt;figure class=&quot;highlight scss
      
    
    </summary>
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="scss" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/scss/"/>
    
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>progit</title>
    <link href="http://www.zhouwenliang.com/progit/"/>
    <id>http://www.zhouwenliang.com/progit/</id>
    <published>2019-10-11T08:39:18.000Z</published>
    <updated>2020-01-06T03:17:23.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集中式和分布式版本控制系统的区别"><a href="#集中式和分布式版本控制系统的区别" class="headerlink" title="集中式和分布式版本控制系统的区别"></a>集中式和分布式版本控制系统的区别</h3><p><img src="https://zhouwenliang.com/img/gitdifferent.jpg" alt="集中式和分布式版本控制系统的区别"></p><h3 id="信息配置"><a href="#信息配置" class="headerlink" title="信息配置"></a>信息配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 全局信息配置（所有本地仓库提交时，都配置此信息）</span><br><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br><span class="line">// 针对该仓库配置 (优先使用配置) </span><br><span class="line">$ git config user.name &quot;John Doe&quot;</span><br><span class="line">//</span><br><span class="line">// 查看信息配置</span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ol><li>/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 —system 选项的<br>git config 时，它会从此文件读写配置变量。</li><li>~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 —global 选项让 Git<br>读写此文件。</li><li>当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</li></ol><h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><h4 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是<br>Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add LICENSE</span><br><span class="line">$ git commit -m &apos;initial project version&apos;</span><br></pre></td></tr></table></figure><h4 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure><p>重命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure></p><h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 暂存文件</span><br><span class="line">$ git add</span><br><span class="line">// 现在的暂存区域已经准备妥当可以提交了</span><br><span class="line">$ git commit</span><br><span class="line">// 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。</span><br><span class="line">$ git diff</span><br><span class="line">// 若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令。</span><br><span class="line">//（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）</span><br><span class="line">// 查看状态</span><br><span class="line">$ git status</span><br><span class="line">// 查看日志</span><br><span class="line">$ git log</span><br></pre></td></tr></table></figure><h4 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 移除README文件</span><br><span class="line">// 要从 Git 中移除某个文件，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</span><br><span class="line">$ git rm README</span><br><span class="line">// 另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在磁盘中。</span><br><span class="line">$ git rm --cached README</span><br></pre></td></tr></table></figure><h4 id="移动文件-即重命名"><a href="#移动文件-即重命名" class="headerlink" title="移动文件(即重命名)"></a>移动文件(即重命名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv file_from file_to</span><br></pre></td></tr></table></figure><h3 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h3><h4 id="重新编辑提交信息"><a href="#重新编辑提交信息" class="headerlink" title="重新编辑提交信息"></a>重新编辑提交信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，</span><br><span class="line">// 可以运行带有 --amend 选项的提交命令尝试重新提交：</span><br><span class="line">$ git commit -m &apos;initial commit&apos;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend</span><br><span class="line">// 最终你只会有一个提交——第二次提交将代替第一次提交的结果。</span><br></pre></td></tr></table></figure><h4 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD CONTRIBUTING.md</span><br><span class="line">// tip:虽然在调用时加上 --hard 选项可以令 git reset 成为一个危险的命令（译注：可能导致工</span><br><span class="line">// 作目录中所有当前进度丢失！），但本例中工作目录内的文件并不会被修改。 不加选项地调用</span><br><span class="line">// git reset 并不危险 — 它只会修改暂存区域。</span><br></pre></td></tr></table></figure><h4 id="撤消对文件的修改"><a href="#撤消对文件的修改" class="headerlink" title="撤消对文件的修改"></a>撤消对文件的修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line">// tips: 这个命令会丢失当前修改，如果你需要当前进度，但有需要撤销当前修改。此时，使用分支来保存进度会很有用</span><br></pre></td></tr></table></figure><h3 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h3><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h4 id="从远程仓库中抓取与拉取"><a href="#从远程仓库中抓取与拉取" class="headerlink" title="从远程仓库中抓取与拉取"></a>从远程仓库中抓取与拉取</h4><p>git fetch 和git pull 的差别</p><ol><li>git fetch 相当于是从远程获取最新到本地，不会自动merge，如下指令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　git fetch orgin master //将远程仓库的master分支下载到本地当前branch中</span><br><span class="line"></span><br><span class="line">　git log -p master  ..origin/master //比较本地的master分支和origin/master分支的差别</span><br><span class="line"></span><br><span class="line">　git merge origin/master //进行合并</span><br></pre></td></tr></table></figure><p>也可以用以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master:tmp //从远程仓库master分支获取最新，在本地建立tmp分支</span><br><span class="line"></span><br><span class="line">git diff tmp //將當前分支和tmp進行對比</span><br><span class="line"></span><br><span class="line">git merge tmp //合并tmp分支到当前分支</span><br></pre></td></tr></table></figure></p><ol><li>git pull：相当于是从远程获取最新版本并merge到本地</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>git pull 相当于从远程获取最新版本并merge到本地</p><p>在实际使用中，git fetch更安全一些</p><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] [branchname]。</span><br></pre></td></tr></table></figure><h4 id="查看某个远程仓库"><a href="#查看某个远程仓库" class="headerlink" title="查看某个远程仓库"></a>查看某个远程仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h4 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 </span><br><span class="line">//例如，想要将 pb重命名为 paul，可以用 git remote rename 这样做：</span><br><span class="line"></span><br><span class="line">git remote rename pb paul</span><br><span class="line"></span><br><span class="line">// 移除远程仓库</span><br><span class="line"></span><br><span class="line">$ git remote rm paul</span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><h4 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.3</span><br><span class="line">// 这个命令以字母顺序列出标签；但是它们出现的顺序并不重要。</span><br><span class="line"></span><br><span class="line">// 特定版本 1.8.5 版本</span><br><span class="line">git tag -l &apos;v1.8.5*&apos;</span><br></pre></td></tr></table></figure><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p>两种标签类型 lightweight(轻量标签) annotated(附注标签)</p><h5 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.4 -m &quot;my version 1.4&quot;</span><br><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.3</span><br><span class="line">v1.4</span><br><span class="line"></span><br><span class="line">// 通过使用 git show 命令可以看到标签信息与对应的提交信息：</span><br><span class="line"></span><br><span class="line">$ git show v1.4</span><br><span class="line">tag v1.4</span><br><span class="line">Tagger: Ben Straub &lt;ben@straub.cc&gt;</span><br><span class="line">Date: Sat May 3 20:19:12 2014 -0700</span><br><span class="line">my version 1.4</span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date: Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line">  changed the version number</span><br></pre></td></tr></table></figure><h5 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h5><p>另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中——没有保存<br>任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p><h4 id="后期打标签"><a href="#后期打标签" class="headerlink" title="后期打标签"></a>后期打标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.2 9fceb02</span><br></pre></td></tr></table></figure><h4 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.5</span><br><span class="line">// 推送所有</span><br><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v1.4-lw</span><br><span class="line">// 应该注意的是上述命令并不会从任何远程仓库中移除这个标签，你必须使用 git push &lt;remote&gt;</span><br><span class="line">// :refs/tags/&lt;tagname&gt; 来更新你的远程仓库：</span><br><span class="line">$ git push origin :refs/tags/v1.4-lw</span><br></pre></td></tr></table></figure><h3 id="Git-别名"><a href="#Git-别名" class="headerlink" title="Git 别名"></a>Git 别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.br branch</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><h3 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h3><p>指向提交对象的指针</p><h3 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h3><h3 id="给一个项目做贡献"><a href="#给一个项目做贡献" class="headerlink" title="给一个项目做贡献"></a>给一个项目做贡献</h3><p>将在 featureB 分支上合并的工作推送到服务器上的 featureBee 分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin featureB:featureBee</span><br></pre></td></tr></table></figure><h4 id="派生的公开项目"><a href="#派生的公开项目" class="headerlink" title="派生的公开项目"></a>派生的公开项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git clone (url)</span><br><span class="line">$ cd project</span><br><span class="line">$ git checkout -b featureA</span><br><span class="line"># (work)</span><br><span class="line">$ git commit</span><br><span class="line"># (work)</span><br><span class="line">$ git commit</span><br><span class="line">// 创建一份自己的可写的项目派生仓库。</span><br><span class="line">$ git remote add myfork (url)</span><br><span class="line">$ git push -u myfork featureA</span><br><span class="line">// 当工作已经被推送到你的派生后，你需要通知维护者。 这通常被称作一个拉取请求（pull request）</span><br></pre></td></tr></table></figure><h3 id="维护项目"><a href="#维护项目" class="headerlink" title="维护项目"></a>维护项目</h3><h4 id="在特性分支中工作"><a href="#在特性分支中工作" class="headerlink" title="在特性分支中工作"></a>在特性分支中工作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch sc/ruby_client master</span><br><span class="line">// 现在你已经准备好将别人贡献的工作加入到这个特性分支，并考虑是否将其合并到长期分支中去了。</span><br></pre></td></tr></table></figure><h4 id="应用来自邮件的补丁"><a href="#应用来自邮件的补丁" class="headerlink" title="应用来自邮件的补丁"></a>应用来自邮件的补丁</h4><p>使用 git apply，或者使用 git am。</p><h3 id="选择修订版本"><a href="#选择修订版本" class="headerlink" title="选择修订版本"></a>选择修订版本</h3><p>Git 允许你通过几种方法来指明特定的或者一定范围内的提交。</p><h4 id="单个修订版本"><a href="#单个修订版本" class="headerlink" title="单个修订版本"></a>单个修订版本</h4><p>你可以通过 Git 给出的 SHA-1 值来获取一次提交。</p><h4 id="简短的-SHA-1"><a href="#简短的-SHA-1" class="headerlink" title="简短的 SHA-1"></a>简短的 SHA-1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 如果你想 git show 这个提交</span><br><span class="line">$ git show 1c002d</span><br></pre></td></tr></table></figure><h4 id="分支引用"><a href="#分支引用" class="headerlink" title="分支引用"></a>分支引用</h4><p>指明一次提交最直接的方法是有一个指向它的分支引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 假设 topic1 分支指向 ca82a6d ，那么以下的命令是等价的：</span><br><span class="line">$ git show ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">$ git show topic1</span><br><span class="line"></span><br><span class="line">// 如果你想知道某个分支指向哪个特定的 SHA-1</span><br><span class="line"></span><br><span class="line">$ git rev-parse topic1</span><br><span class="line">ca82a6dff817ec66f44342007202690a93763949</span><br></pre></td></tr></table></figure><h4 id="引用日志"><a href="#引用日志" class="headerlink" title="引用日志"></a>引用日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 每当你的 HEAD 所指向的位置发生了变化，Git 就会将这个信息存储到引用日志这个历史记录里。</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line">// 显示5条</span><br><span class="line">$ git show HEAD@&#123;5&#125;</span><br></pre></td></tr></table></figure><h4 id="祖先引用"><a href="#祖先引用" class="headerlink" title="祖先引用"></a>祖先引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// HEAD 的父提交的父提交的父提交的第二个父提交</span><br><span class="line">HEAD~3^2</span><br></pre></td></tr></table></figure><h4 id="提交区间"><a href="#提交区间" class="headerlink" title="提交区间"></a>提交区间</h4><h5 id="双点"><a href="#双点" class="headerlink" title="双点"></a>双点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log master..experiment</span><br><span class="line">D</span><br><span class="line">C</span><br><span class="line"></span><br><span class="line">$ git log experiment..master</span><br><span class="line">F</span><br><span class="line">E</span><br><span class="line"></span><br><span class="line">// 查看本地仓库有，远程没有的提交</span><br><span class="line">$ git log origin/master..HEAD</span><br></pre></td></tr></table></figure><h5 id="多点"><a href="#多点" class="headerlink" title="多点"></a>多点</h5><p>两个以上的分支才能确定你所需要的修订<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//  Git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希</span><br><span class="line">//  望提交被包含其中的分支。 因此下列3个命令是等价的：</span><br><span class="line"></span><br><span class="line">$ git log refA..refB</span><br><span class="line">$ git log ^refA refB</span><br><span class="line">$ git log refB --not refA</span><br><span class="line"></span><br><span class="line">// 被 refA 或 refB 包含的但是不被 refC 包含的提交</span><br><span class="line"></span><br><span class="line">$ git log refA refB ^refC</span><br><span class="line">$ git log refA refB --not refC</span><br></pre></td></tr></table></figure></p><h5 id="三点"><a href="#三点" class="headerlink" title="三点"></a>三点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 如果你想看 master 或者 experiment 中包含的但不是两者共有的提</span><br><span class="line">// 交，你可以执行</span><br><span class="line">$ git log master...experiment</span><br><span class="line">F</span><br><span class="line">E</span><br><span class="line">D</span><br><span class="line">C</span><br><span class="line"></span><br><span class="line">// --left-right，它会显示每个提交到底处于哪一侧的分支。</span><br><span class="line"></span><br><span class="line">$ git log --left-right master...experiment</span><br><span class="line">&lt; F</span><br><span class="line">&lt; E</span><br><span class="line">&gt; D</span><br><span class="line">&gt; C</span><br></pre></td></tr></table></figure><h3 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a>重写历史</h3><h4 id="修改最后一次提交"><a href="#修改最后一次提交" class="headerlink" title="修改最后一次提交"></a>修改最后一次提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><h3 id="高级合并"><a href="#高级合并" class="headerlink" title="高级合并"></a>高级合并</h3><h4 id="中断一次合并"><a href="#中断一次合并" class="headerlink" title="中断一次合并"></a>中断一次合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --abort</span><br></pre></td></tr></table></figure><h4 id="忽略空白"><a href="#忽略空白" class="headerlink" title="忽略空白"></a>忽略空白</h4><p>两个参数选项：-Xignore-all-space 和 -Xignore-space-change<br>第一个选项忽略任意 数量 的已有空白的修改，第二个选项忽略所有空白修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge -Xignore-space-change branchName</span><br></pre></td></tr></table></figure><h4 id="手动文件再合并"><a href="#手动文件再合并" class="headerlink" title="手动文件再合并"></a>手动文件再合并</h4><p> git show 命令与一个特别的语法，你可以将冲突文件的这些版本释放出一份拷贝。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git show :1:hello.rb &gt; hello.common.rb</span><br><span class="line">$ git show :2:hello.rb &gt; hello.ours.rb</span><br><span class="line">$ git show :3:hello.rb &gt; hello.theirs.rb</span><br><span class="line"></span><br><span class="line">// 使用 ls-files -u 底层命令来得到这些文件的 Git blob 对象的实际 SHA-1值。</span><br><span class="line">$ git ls-files -u100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1 hello.rb100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2 hello.rb100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3 hello.rb</span><br><span class="line"></span><br><span class="line">// 手工修复它们来修复</span><br><span class="line">$ dos2unix hello.theirs.rb</span><br><span class="line">// git merge-file 命令来重新合并那个文件</span><br><span class="line"></span><br><span class="line">$ git merge-file -p \</span><br><span class="line">  hello.ours.rb hello.common.rb hello.theirs.rb &gt; hello.rb</span><br><span class="line"></span><br><span class="line">//  git clean 命令来清理我们为手动合并而创建但不再有用的额外文件。</span><br><span class="line">$ git clean -f</span><br><span class="line">Removing hello.common.rb</span><br><span class="line">Removing hello.ours.rb</span><br><span class="line">Removing hello.theirs.rb</span><br></pre></td></tr></table></figure><h4 id="检出冲突"><a href="#检出冲突" class="headerlink" title="检出冲突"></a>检出冲突</h4><p>上下文关联来解决这些冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --conflict=diff3 hello.rb</span><br><span class="line"></span><br><span class="line">// 通过设置 merge.conflictstyle 选项为 diff3 来做为以后合并冲突的默认选项。</span><br><span class="line"></span><br><span class="line">$ git config --global merge.conflictstyle diff3</span><br></pre></td></tr></table></figure><h4 id="合并日志"><a href="#合并日志" class="headerlink" title="合并日志"></a>合并日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 三点语法查出两边都没有的提交</span><br><span class="line">$ git log --oneline --left-right HEAD...MERGE_HEAD</span><br><span class="line">&lt; f1270f7 update README</span><br><span class="line">&lt; 9af9d3b add a README</span><br><span class="line">&lt; 694971d update phrase to hola world</span><br><span class="line">&gt; e3eb223 add more tests</span><br><span class="line">&gt; 7cff591 add testing script</span><br><span class="line">&gt; c3ffff1 changed text to hello mundo</span><br><span class="line"></span><br><span class="line">// 查出冲突的提交</span><br><span class="line"></span><br><span class="line">$ git log --oneline --left-right --merge</span><br><span class="line">&lt; 694971d update phrase to hola world</span><br><span class="line">&gt; c3ffff1 changed text to hello mundo</span><br><span class="line"></span><br><span class="line">// 如果你运行命令时用 -p 选项代替，你会得到所有冲突文件的区别。 </span><br><span class="line">// 快速获得你需要帮助理解为什么发生冲突的</span><br><span class="line">// 上下文，以及如何聪明地解决它，这会 非常 有用。</span><br></pre></td></tr></table></figure><h4 id="组合式差异格式"><a href="#组合式差异格式" class="headerlink" title="组合式差异格式"></a>组合式差异格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line">$ git log --cc -p -1</span><br></pre></td></tr></table></figure><h3 id="撤消合并"><a href="#撤消合并" class="headerlink" title="撤消合并"></a>撤消合并</h3><h4 id="修复引用"><a href="#修复引用" class="headerlink" title="修复引用"></a>修复引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 如果这个不想要的合并提交只存在于你的本地仓库中，</span><br><span class="line">git reset --hard HEAD~</span><br></pre></td></tr></table></figure><h4 id="还原提交"><a href="#还原提交" class="headerlink" title="还原提交"></a>还原提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git revert -m 1 HEAD[master b1d8379] Revert &quot;Merge branch &apos;topic&apos;&quot;</span><br><span class="line"></span><br><span class="line">$ git revert ^M</span><br><span class="line">[master 09f0126] Revert &quot;Revert &quot;Merge branch &apos;topic&apos;&quot;&quot;</span><br><span class="line">$ git merge topic</span><br></pre></td></tr></table></figure><h3 id="其他类型的合并"><a href="#其他类型的合并" class="headerlink" title="其他类型的合并"></a>其他类型的合并</h3><h4 id="我们的或他们的偏好"><a href="#我们的或他们的偏好" class="headerlink" title="我们的或他们的偏好"></a>我们的或他们的偏好</h4><p>传递给 merge 命令一个-Xours 或 -Xtheirs 参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 冲突时可以应用其中一边</span><br><span class="line">$ git merge -Xours mundo</span><br><span class="line"></span><br><span class="line">// 只应用其中一边，简单的假合并</span><br><span class="line"></span><br><span class="line">$ git merge -s ours mundo</span><br><span class="line"></span><br><span class="line">// 当再次合并时从本质上欺骗 Git 认为那个分支已经合并过经常是很有用的。</span><br></pre></td></tr></table></figure><h4 id="子树合并"><a href="#子树合并" class="headerlink" title="子树合并"></a>子树合并</h4><h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><h4 id="开始使用子模块"><a href="#开始使用子模块" class="headerlink" title="开始使用子模块"></a>开始使用子模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add https://github.com/chaconinc/DbConnector</span><br></pre></td></tr></table></figure><h4 id="克隆含有子模块的项目"><a href="#克隆含有子模块的项目" class="headerlink" title="克隆含有子模块的项目"></a>克隆含有子模块的项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/chaconinc/MainProject</span><br><span class="line"></span><br><span class="line">// 此时子目录还是空的</span><br><span class="line"></span><br><span class="line">$ git submodule init</span><br><span class="line"></span><br><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure><h4 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h4><h5 id="拉取上游修改"><a href="#拉取上游修改" class="headerlink" title="拉取上游修改"></a>拉取上游修改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 如果想要在子模块中查看新工作，可以进入到目录中运行 git fetch 与 git merge</span><br><span class="line">$ git fetch</span><br><span class="line"></span><br><span class="line">$ git merge origin/master</span><br></pre></td></tr></table></figure><h5 id="在子模块上工作"><a href="#在子模块上工作" class="headerlink" title="在子模块上工作"></a>在子模块上工作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;集中式和分布式版本控制系统的区别&quot;&gt;&lt;a href=&quot;#集中式和分布式版本控制系统的区别&quot; class=&quot;headerlink&quot; title=&quot;集中式和分布式版本控制系统的区别&quot;&gt;&lt;/a&gt;集中式和分布式版本控制系统的区别&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="progit" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/progit/"/>
    
    
  </entry>
  
  <entry>
    <title>POST提交数据之---Content-Type的理解</title>
    <link href="http://www.zhouwenliang.com/POST%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E4%B9%8B-Content-Type%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.zhouwenliang.com/POST提交数据之-Content-Type的理解/</id>
    <published>2019-09-16T01:20:41.000Z</published>
    <updated>2019-10-09T05:14:14.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Content-Type的理解"><a href="#Content-Type的理解" class="headerlink" title="Content-Type的理解"></a>Content-Type的理解</h3><p>Content-Type是指http/https发送信息至服务器时的内容编码类型，contentType用于表明发送数据流的类型，服务器根据编码类型使用特定的解析方式，获取数据流中的数据。<br>在网络请求中，常用的Content-Type有如下：text/html, text/plain, text/css, text/javascript, image/jpeg, image/png, image/gif,<br>application/x-www-form-urlencoded, multipart/form-data, application/json, application/xml 等。<br>其中：text/html, text/plain, text/css, text/javascript, image/jpeg, image/png, image/gif, 都是常见的页面资源类型。<br>application/x-www-form-urlencoded, multipart/form-data, application/json, application/xml 这四个是ajax的请求，表单提交或上传文件的常用的资源类型。<br>form表单中可以定义enctype属性，该属性的含义是在发送到服务器之前应该如何对表单数据进行编码。默认的情况下，表单数据会编码为<br>“application/x-www-form-unlencoded”.<br>enctype常用的属性值如下：application/x-www-form-unlencoded： 在发送前编码所有字符(默认情况下)；<br>multipart/form-data, 不对字符编码。在使用文件上传时候，使用该值。</p><h3 id="错误设置Content-Type可能会导致的问题"><a href="#错误设置Content-Type可能会导致的问题" class="headerlink" title="错误设置Content-Type可能会导致的问题"></a>错误设置Content-Type可能会导致的问题</h3><h4 id="application-json-可能会导致"><a href="#application-json-可能会导致" class="headerlink" title="application/json 可能会导致"></a>application/json 可能会导致</h4><ol><li>使用JSON JavaScriptSerializer 进行序列化或反序列化时出错。字符串的长度超过了为 maxJsonLength属性,后台解析错误，</li><li>还可能出现跨域问题</li></ol><p>解决办法：设置为application/x-www-form-urlencoded则OK，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Content-Type的理解&quot;&gt;&lt;a href=&quot;#Content-Type的理解&quot; class=&quot;headerlink&quot; title=&quot;Content-Type的理解&quot;&gt;&lt;/a&gt;Content-Type的理解&lt;/h3&gt;&lt;p&gt;Content-Type是指http
      
    
    </summary>
    
      <category term="前端" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA不对称加密原理</title>
    <link href="http://www.zhouwenliang.com/RSA%E4%B8%8D%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://www.zhouwenliang.com/RSA不对称加密/</id>
    <published>2019-09-05T03:31:14.000Z</published>
    <updated>2019-09-05T07:37:57.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RSA加密简介"><a href="#RSA加密简介" class="headerlink" title="RSA加密简介"></a>RSA加密简介</h3><p>RSA加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。是由一对密钥来进行加解密的过程，分别称为公钥和私钥。两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p><h3 id="RSA加密、签名区别"><a href="#RSA加密、签名区别" class="headerlink" title="RSA加密、签名区别"></a>RSA加密、签名区别</h3><p>加密和签名都是为了安全性考虑，但略有不同。常有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。简单的说，加密是为了防止信息被泄露，而签名是为了防止信息被篡改。这里举2个例子说明。</p><h4 id="第一个场景："><a href="#第一个场景：" class="headerlink" title="第一个场景："></a>第一个场景：</h4><p>战场上，B要给A传递一条消息，内容为某一指令。</p><p>RSA的加密过程如下：</p><ol><li><p>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</p></li><li><p>A传递自己的公钥给B，B用A的公钥对消息进行加密。</p></li><li><p>A接收到B加密的消息，利用A自己的私钥对消息进行解密。</p></li></ol><p>在这个过程中，只有2次传递过程，第一次是A传递公钥给B，第二次是B传递加密消息给A，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行解密，防止了消息内容的泄露。</p><h4 id="第二个场景："><a href="#第二个场景：" class="headerlink" title="第二个场景："></a>第二个场景：</h4><p>A收到B发的消息后，需要进行回复“收到”。</p><p>RSA签名的过程如下：</p><ol><li><p>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</p></li><li><p>A用自己的私钥对消息加签，形成签名，并将加签的消息和消息本身一起传递给B。</p></li><li><p>B收到消息后，在获取A的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是A回复的。</p></li></ol><p>在这个过程中，只有2次传递过程，第一次是A传递加签的消息和消息本身给B，第二次是B获取A的公钥，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行签名，即使知道了消息内容，也无法伪造带签名的回复给B，防止了消息内容的篡改。</p><p>但是，综合两个场景你会发现，第一个场景虽然被截获的消息没有泄露，但是可以利用截获的公钥，将假指令进行加密，然后传递给A。第二个场景虽然截获的消息不能被篡改，但是消息的内容可以利用公钥验签来获得，并不能防止泄露。所以在实际应用中，要根据情况使用，也可以同时使用加密和签名，比如A和B都有一套自己的公钥和私钥，当A要给B发送消息时，先用B的公钥对消息加密，再对加密的消息使用A的私钥加签名，达到既不泄露也不被篡改，更能保证消息的安全性。</p><h4 id="总结：公钥加密、私钥解密、私钥签名、公钥验签。"><a href="#总结：公钥加密、私钥解密、私钥签名、公钥验签。" class="headerlink" title="总结：公钥加密、私钥解密、私钥签名、公钥验签。"></a>总结：公钥加密、私钥解密、私钥签名、公钥验签。</h4><p>PS:RSA加密对明文的长度有所限制，规定需加密的明文最大长度=密钥长度-11（单位是字节，即byte），所以在加密和解密的过程中需要分块进行。而密钥默认是1024位，即1024位/8位-11=128-11=117字节。所以默认加密前的明文最大长度117字节，解密密文最大长度为128字。那么为啥两者相差11字节呢？是因为RSA加密使用到了填充模式（padding），即内容不足117字节时会自动填满，用到填充模式自然会占用一定的字节，而且这部分字节也是参与加密的。</p><p>　　密钥长度的设置就是上面例子的第32行。可自行调整，当然非对称加密随着密钥变长，安全性上升的同时性能也会有所下降。</p><p><a href="https://www.cnblogs.com/pcheng/p/9629621.html" target="_blank" rel="noopener">转载自技术宅de小坑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;RSA加密简介&quot;&gt;&lt;a href=&quot;#RSA加密简介&quot; class=&quot;headerlink&quot; title=&quot;RSA加密简介&quot;&gt;&lt;/a&gt;RSA加密简介&lt;/h3&gt;&lt;p&gt;RSA加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直
      
    
    </summary>
    
      <category term="前端" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://www.zhouwenliang.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>函数柯里化</title>
    <link href="http://www.zhouwenliang.com/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>http://www.zhouwenliang.com/函数柯里化/</id>
    <published>2019-08-08T10:39:18.000Z</published>
    <updated>2019-10-18T01:44:52.248Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript高级程序设计" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>高级程序设计笔记</title>
    <link href="http://www.zhouwenliang.com/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.zhouwenliang.com/JavaScript高级程序设计笔记/</id>
    <published>2019-08-08T10:39:18.000Z</published>
    <updated>2019-10-15T01:18:04.157Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>文档对象模型（DOM，Document Object Model）是针对 XML 但经过扩展用于 HTML 的应用程序编程接口（API，Application Programming Interface）。通过 DOM 创建的这个表示文档的树形图，开发人员获得了控制页面内容和结构的主动权。借助DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>理解 DOM 的关键，就是理解 DOM 对性能的影响。DOM 操作往往是 JavaScript 程序中开销最大的 2 部分，而因访问 NodeList 导致的问题为最多。NodeList 对象都是“动态的”，这就意味着每次访问NodeList 对象，都会运行一次查询。有鉴于此，最好的办法就是尽量减少 DOM 操作。</p><h3 id="内存和性能"><a href="#内存和性能" class="headerlink" title="内存和性能"></a>内存和性能</h3><p>由于事件处理程序可以为现代 Web 应用程序提供交互能力，因此许多开发人员会不分青红皂白地向页面中添加大量的处理程序。在创建 GUI 的语言（如 C#）中，为 GUI 中的每个按钮添加一个 onclick事件处理程序是司空见惯的事，而且这样做也不会导致什么问题。可是在 JavaScript 中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能。导致这一问题的原因是多方面的。首先，每个函数都是对象，都会占用内存；内存中的对象越多，性能就越差。其次，必须事先指定所有事件处理程序而导致的 DOM 访问次数，会延迟整个页面的交互就绪时间。事实上，从如何利用好事件处理程序的角度出发，还是有一些方法能够提升性能的。</p><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>可以解决性能，和设置未来添加的元素的事件</p><h4 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h4><p>在两种情况下，可能会造成上述问题。第一种情况就是从文档中移除带有事件处理程序的元素时。这可能是通过纯粹的 DOM 操作，例如使用 removeChild()和 replaceChild()方法，但更多地是发生在使用 innerHTML 替换页面中某一部分的时候。如果带有事件处理程序的元素被 innerHTML 删除了，那么原来添加到元素中的事件处理程序极有可能无法被当作垃圾回收。来看下面的例子。</p><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">var</span> finalArgs = args.concat(innerArgs); </span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, finalArgs); </span><br><span class="line"> &#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> curriedAdd = curry(add, <span class="number">5</span>); </span><br><span class="line">alert(curriedAdd(<span class="number">3</span>)); <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>当使用 bind()时，它会返回绑定到给定环境的函数，并且可能它其中某些<br>函数参数已经被设好。当你想除了 event 对象再额外给事件处理程序传递参数时，这非常有用，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ECMAScript <span class="number">5</span> 的 bind()方法也实现函数柯里化，只要在 <span class="keyword">this</span> 的值之后再传入另一个参数即可。</span><br><span class="line"><span class="keyword">var</span> handler = &#123; </span><br><span class="line">    message: <span class="string">"Event handled"</span>, </span><br><span class="line">    handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">name, event</span>)</span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.message + <span class="string">":"</span> + name + <span class="string">":"</span> + event.type); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"my-btn"</span>); </span><br><span class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, handler.handleClick.bind(handler, <span class="string">"my-btn"</span>));</span><br></pre></td></tr></table></figure><p>JavaScript 中的柯里化函数和绑定函数提供了强大的动态函数创建功能。使用 bind()还是 curry()<br>要根据是否需要 object 对象响应来决定。它们都能用于创建复杂的算法和功能，当然两者都不应滥用，<br>因为每个函数都会带来额外的开销。</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">EventTarget.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line">  addHandler: function (type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">  &#125;,</span><br><span class="line">  fire: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">        handlers[i](event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[type];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      handlers.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line"> alert(<span class="string">"Message received: "</span> + event.message); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//创建一个新对象</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> EventTarget(); </span><br><span class="line"><span class="comment">//添加一个事件处理程序</span></span><br><span class="line">target.addHandler(<span class="string">"message"</span>, handleMessage); </span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">target.fire(&#123; <span class="attr">type</span>: <span class="string">"message"</span>, <span class="attr">message</span>: <span class="string">"Hello world!"</span>&#125;); </span><br><span class="line"><span class="comment">//删除事件处理程序</span></span><br><span class="line">target.removeHandler(<span class="string">"message"</span>, handleMessage); </span><br><span class="line"><span class="comment">//再次，应没有处理程序</span></span><br><span class="line">target.fire(&#123; <span class="attr">type</span>: <span class="string">"message"</span>, <span class="attr">message</span>: <span class="string">"Hello world!"</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript高级程序设计" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>C#-learn</title>
    <link href="http://www.zhouwenliang.com/c-learn/"/>
    <id>http://www.zhouwenliang.com/c-learn/</id>
    <published>2019-08-07T11:20:14.000Z</published>
    <updated>2019-08-13T08:27:15.083Z</updated>
    
    <content type="html"><![CDATA[<p>主要承诺：C# 学习笔记的记录</p><p>开始时间：2019-7-15</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>目前工作的后端技术栈是.net，所以有必要学习和对后续学习其他后端语言打好一点基础。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>尽量快速掌握C#，并实践</li><li>复习该笔记。</li></ol><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ol><li>1天<ul><li></li><li></li></ul></li><li>7天</li><li>30天</li><li>60天</li><li>90天</li><li>100天</li></ol><h3 id="额外的补充"><a href="#额外的补充" class="headerlink" title="额外的补充"></a>额外的补充</h3><ul><li>难点等深度扩展，会另写一篇文章进行记录。</li></ul><h3 id="日志模板"><a href="#日志模板" class="headerlink" title="日志模板"></a>日志模板</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>## 第N天</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 学习节点标题 -内容：笔记</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 思想和情绪</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 明天的计划</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="第1天-2019年8月7日"><a href="#第1天-2019年8月7日" class="headerlink" title="第1天 2019年8月7日"></a>第1天 2019年8月7日</h3><h4 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h4><p>C# 是专为公共语言基础结构（CLI）设计的。CLI 由可执行代码和运行时环境组成，允许在不同的计算机平台和体系结构上使用各种高级语言。</p><h4 id="Net-框架（-Net-Framework）"><a href="#Net-框架（-Net-Framework）" class="headerlink" title=".Net 框架（.Net Framework）"></a>.Net 框架（.Net Framework）</h4><p>.Net 框架应用程序是多平台的应用程序。框架的设计方式使它适用于下列各种语言：C#、C++、Visual Basic、Jscript、COBOL 等等。所有这些语言可以访问框架，彼此之间也可以互相交互。</p><p>.Net 框架由一个巨大的代码库组成，用于 C# 等客户端语言。下面列出一些 .Net 框架的组件：</p><ul><li>公共语言运行库（Common Language Runtime - CLR）</li><li>.Net 框架类库（.Net Framework Class Library）</li><li>公共语言规范（Common Language Specification）</li><li>通用类型系统（Common Type System）</li><li>元数据（Metadata）和组件（Assemblies）</li><li>Windows 窗体（Windows Forms）</li><li>ASP.Net 和 ASP.Net AJAX</li><li>ADO.Net</li><li>Windows 工作流基础（Windows Workflow Foundation - WF）</li><li>Windows 显示基础（Windows Presentation Foundation）</li><li>Windows 通信基础（Windows Communication Foundation - WCF）</li><li>LINQ</li></ul><h4 id="思想和情绪"><a href="#思想和情绪" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><h4 id="明天的计划"><a href="#明天的计划" class="headerlink" title="明天的计划"></a>明天的计划</h4><hr><h3 id="第2天-2019年8月8日"><a href="#第2天-2019年8月8日" class="headerlink" title="第2天 2019年8月8日"></a>第2天 2019年8月8日</h3><h4 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C# 数据类型"></a>C# 数据类型</h4><p>在 C# 中，变量分为以下几种类型：</p><ul><li>值类型（Value types）</li><li>引用类型（Reference types）</li><li>指针类型（Pointer types）</li></ul><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。</p><h4 id="思想和情绪-1"><a href="#思想和情绪-1" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><h4 id="明天的计划-1"><a href="#明天的计划-1" class="headerlink" title="明天的计划"></a>明天的计划</h4><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要承诺：C# 学习笔记的记录&lt;/p&gt;
&lt;p&gt;开始时间：2019-7-15&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;目前工作的后端技术栈是.net，所以有必要学习和对
      
    
    </summary>
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="C#" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/C/"/>
    
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="http://www.zhouwenliang.com/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhouwenliang.com/中介者模式/</id>
    <published>2019-08-01T08:39:18.000Z</published>
    <updated>2019-10-15T01:18:04.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>应用程序，无论其大小，都是由一些单个的对象所组成。所有这些对象需要一种方式来实现相互通信，而这种通信方式在一定程度上不降低可维护性，也不损害那种安全的改变部分应用程序而不会破坏其余部分的能力。随着应用程序的增长，将添加越来越多的对象。然后再代码重构期间，对象将被删除或者重新整理。当对象互相知道太多信息并且直接通信（调用对方的方法并改变属性）时，这将会导致产生不良的紧耦合（tight coupling）问题。当对象间紧密耦合时，很难在改变单个对象的同时不影响其他多个对象。因而，即使对应用程序进行最简单的修改也变得不再容易，而且几乎无法估计修改可能话费的时间。</p><p>中介者模式缓解了该问题并促进形成松耦合(loose coupling),而且还有助于提高可维护性。这种模式中，独立的对象之间并不直接通信，而是通过mediator将会把该变化传到任意其他应该只知道此变化的colleague对象。</p><h3 id="中介者示例"><a href="#中介者示例" class="headerlink" title="中介者示例"></a>中介者示例</h3><p>下面让我们探讨使用中介模式的例子。该应用程序是一个游戏程序，其中两名玩家分别给予半分钟的时间以竞争决胜出谁会比另一个按更多次数的按钮。在比赛中玩家1按2，而玩家2按0。计分板依据当前得分进行更新。</p><p>本例中参与的对象如下所示：</p><ol><li>玩家1</li><li>玩家2</li><li>计分板</li><li>中介者</li></ol><p>中介者知道所有其他对象的信息。它与输入设备(键盘)进行通信并处理键盘按键事件，并且还要决定是哪个玩家前进了一个回合，随后还将该消息通知给玩家。玩家玩游戏的同时，还要通知中介者他所做的事情。中介者将更新后的分数传达给计分板，计分板随后更新显示的分值。</p><p>除了中介者以外，没有对象知道任何其他对象。这种模式使得更新游戏变得非常方便，比如，通过该中介者可以很容易添加一个新的玩家或者另一个显示剩余时间的显示窗口。</p><p>player对象是由Player()构造函数所创建的，具有points和name属性。原型中的play()方法每次以1递增分数，然后通知中介者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.points = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.points +=<span class="number">1</span>;</span><br><span class="line">  mediator.played();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scoreboard对象中有一个update()方法,在轮到每个玩家游戏结束之后mediator对象将调用该方法。scoreboard并不知道任何玩家的接口并且也没有保存分值，它仅根据mediator给定的值显示当前分数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scoreboard = &#123;</span><br><span class="line">  <span class="comment">// 待更新的HTML元素</span></span><br><span class="line">  element: <span class="built_in">document</span>.getElementById(<span class="string">'results),</span></span><br><span class="line"><span class="string">  // 更新得分显示</span></span><br><span class="line"><span class="string">  update:function(score)&#123;</span></span><br><span class="line"><span class="string">    var i,msg = '</span><span class="string">';</span></span><br><span class="line"><span class="string">    for (i in score)&#123;</span></span><br><span class="line"><span class="string">      if(score.hasOwnProperty(i)) &#123;</span></span><br><span class="line"><span class="string">        msg += '</span>&lt;p&gt;&lt;strong&gt;'+i+'&lt;\/strong&gt;<span class="string">';</span></span><br><span class="line"><span class="string">        msg += score[i];</span></span><br><span class="line"><span class="string">        msg += '</span>&lt;\/p&gt;<span class="string">';</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    this.element.innerHMTL = msg;</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>现在，让我们来查看一下mediator对象。它首先初始化游戏，在它的setup()方法中创建player对象，然后将这些player对象记录到自己的players属性中。其中,played()方法将在每轮游戏后由player所调用。该方法更新score哈希表并将其发送到scoreboard中以用于显示分值。最后一个方法为keypress(),它用于处理键盘事件，确定那个玩家前进了一个回合并通知该玩家：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediator = &#123;</span><br><span class="line">  <span class="comment">// 所有的玩家(player对象)</span></span><br><span class="line">  players:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  setup:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> players = <span class="keyword">this</span>.players;</span><br><span class="line">    players.home = <span class="keyword">new</span> Player(<span class="string">'Home'</span>);</span><br><span class="line">    players.guest = <span class="keyword">new</span> Player(<span class="string">'Guest'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果有人玩,则更新得分值</span></span><br><span class="line">  played:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> players = <span class="keyword">this</span>.players,</span><br><span class="line">    score = &#123;</span><br><span class="line">      Home: players.home.points,</span><br><span class="line">      Guest:players.guest.points</span><br><span class="line">    &#125;;</span><br><span class="line">    scoreboard.update(score);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 处理用户交互</span></span><br><span class="line">  keypress:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event; <span class="comment">//IE浏览器</span></span><br><span class="line">    <span class="keyword">if</span>(e.which === <span class="number">49</span>)&#123; <span class="comment">// 按键1</span></span><br><span class="line">      mediator.players.home.play();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(e.which === <span class="number">48</span>)&#123; <span class="comment">// 按键2</span></span><br><span class="line">      mediator.players.guest.play();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而最后的事情就是要建立以及拆除该游戏：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行!</span></span><br><span class="line">mediator.setup();</span><br><span class="line"><span class="built_in">window</span>.onkeypress = mediator.keypress;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏在30秒内结束</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.onkeypress = <span class="literal">null</span>;</span><br><span class="line">  alert(<span class="string">'Game over!'</span>);</span><br><span class="line">&#125;,<span class="number">30000</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;中介者模式&quot;&gt;&lt;a href=&quot;#中介者模式&quot; class=&quot;headerlink&quot; title=&quot;中介者模式&quot;&gt;&lt;/a&gt;中介者模式&lt;/h3&gt;&lt;p&gt;应用程序，无论其大小，都是由一些单个的对象所组成。所有这些对象需要一种方式来实现相互通信，而这种通信方式在一定程度上
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript模式" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/javascript%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.zhouwenliang.com/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhouwenliang.com/代理模式/</id>
    <published>2019-07-30T02:19:15.000Z</published>
    <updated>2019-10-15T01:18:04.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><img src="https://wenliangzhou.github.io/blog/img/proxy.png"></p><h3 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://wenliangzhou.github.io/blog/img/proxy.png&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript模式" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/javascript%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://www.zhouwenliang.com/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhouwenliang.com/外观模式/</id>
    <published>2019-07-30T02:03:21.000Z</published>
    <updated>2019-10-15T01:18:04.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观(facade)模式是一种简单的模式，它为对象提供了一个可供选择的接口。这是一种非常好的设计模式实践，可保持方法的简洁性并且不会使他们处理过多的工作。如果原来有许多接受多个参数的uber方法，相比而言，按照本方法实现，最终将会创建更多数量的方法。有时候，两个或者更多的方法可能普遍的被遗弃调用。在这种情况下，创建另一个方法以包装重复的方法调用时非常有意义的。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myevent = &#123;</span><br><span class="line">  stop:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外观模式也非常适合于浏览器脚本处理，据此可将浏览器之间的差异隐藏在外观之后。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myevent = &#123;</span><br><span class="line">  stop:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 其他</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> e.preventDefault === <span class="string">"function"</span>)&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// IE浏览器</span></span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">      <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="利于重构"><a href="#利于重构" class="headerlink" title="利于重构"></a>利于重构</h3><p>外观模式对于重新设计和重构的工作也很有帮助。当需要替换一个具有不同实现的对象时，不得不花一段时间对它重新进行修改（这是一个复杂的对象），而且同时还需要使用该对象的新代码。通过使用外观模式，可以首先考虑对象的API，然后继续在原有对象的前面创建一个外观。这样，当您着手完全取代原有对象的时候，仅需修改更少的客户端代码，这是由于任何最新的客户端代码都已经使用了这个新API。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h3&gt;&lt;p&gt;外观(facade)模式是一种简单的模式，它为对象提供了一个可供选择的接口。这是一种非常好的设计模式实践，可保持方法的简洁性
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript模式" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/javascript%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="http://www.zhouwenliang.com/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhouwenliang.com/装饰者模式/</id>
    <published>2019-07-29T08:56:54.000Z</published>
    <updated>2019-10-15T01:18:04.182Z</updated>
    
    <content type="html"><![CDATA[<p>在装饰者模式中，可以在运行时动态添加功能到对象中。当处理静态类时，这可能是一个挑战。在Javasctipt中，由于对象是可变的，因此，添加功能到对象中的过程本身并不是问题。</p><p>装饰者模式的一个比较方便的特征在于其预期行为的可定制和可配置特性。可以从仅具有一些基本功能的普通对象开始，然后从可用装饰资源池中选择需要用于增强普通对象的那些功能，并且按照顺序进行装饰，尤其是当装饰顺序很重要的时候。</p><p>期望形式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>);     <span class="comment">//该价格为100美元</span></span><br><span class="line">sale = sale.decorate(<span class="string">'fedtax'</span>); <span class="comment">//增加联邦税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>); <span class="comment">//增加省级税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'money'</span>); <span class="comment">//格式化为美元货币形式</span></span><br><span class="line">sale.getPrice();</span><br></pre></td></tr></table></figure><p>实现方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price=<span class="number">100</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.price = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 装饰着对象都将以构造函数的属性这种方式来实现：</span></span><br><span class="line">Sale.decorators = &#123;&#125;;</span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">  getPrice:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice();</span><br><span class="line">    price += price * <span class="number">5</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">  getPrice:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice();</span><br><span class="line">    price += price*<span class="number">7.5</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后decorate()方法，它可以将所有的块拼接在一起。</span></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span> (<span class="params">decorator</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  overrides = <span class="keyword">this</span>.constructor.decorators[decorator],</span><br><span class="line">  i,newobj;</span><br><span class="line">  F.prototype = <span class="keyword">this</span>;</span><br><span class="line">  newobj = <span class="keyword">new</span> F();</span><br><span class="line">  newobj.uber = F.prototype;</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> overrides)&#123;</span><br><span class="line">    <span class="keyword">if</span>(overrides.hasOwnProperty(i))&#123;</span><br><span class="line">      newobj[i] = overrides[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用列表实现"><a href="#使用列表实现" class="headerlink" title="使用列表实现"></a>使用列表实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>);</span><br><span class="line">sale.decorate(<span class="string">'fedtax'</span>);</span><br><span class="line">sale.decorate(<span class="string">'quebec'</span>);</span><br><span class="line">sale.decorate(<span class="string">'money'</span>);</span><br><span class="line">sale.getPrice(); <span class="comment">//$112.88</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price = <span class="number">100</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">  <span class="keyword">this</span>.decorators_list = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.decorators = &#123;&#125;;</span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">  getPrice:<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price + price *<span class="number">5</span>/<span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">  getPrice:<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price + price *<span class="number">7.5</span>/<span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">  getPrice:<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'$'</span> + price.toFixed(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.decorators_list.push(decorator);</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> price = <span class="keyword">this</span>.price,i,max = <span class="keyword">this</span>.decorators_list.length,name;</span><br><span class="line">  <span class="keyword">for</span>(i==<span class="number">0</span>;i&lt;max;i+=<span class="number">1</span>)&#123;</span><br><span class="line">    name = <span class="keyword">this</span>.decorators_list[i];</span><br><span class="line">    price = Sale.decorators[name].getPrice(price);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在装饰者模式中，可以在运行时动态添加功能到对象中。当处理静态类时，这可能是一个挑战。在Javasctipt中，由于对象是可变的，因此，添加功能到对象中的过程本身并不是问题。&lt;/p&gt;
&lt;p&gt;装饰者模式的一个比较方便的特征在于其预期行为的可定制和可配置特性。可以从仅具有一些基本
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript模式" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/javascript%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式(发布/订阅)</title>
    <link href="http://www.zhouwenliang.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhouwenliang.com/观察者模式/</id>
    <published>2019-07-29T07:29:14.000Z</published>
    <updated>2019-10-15T01:18:04.186Z</updated>
    
    <content type="html"><![CDATA[<p>观察者(observer)模式广泛应用于客户端Javacript编程中。所有浏览器事件（鼠标悬停，按键等事件）是该模式的例子。它的另一个名字也称为自定义事件（custom evensts）,与那些浏览器事件相比，自定义事件表示是由您编程实现的事件。此外，该模式的另外一个别名是订阅/发布(subscriber/publisher)模式。</p><p>设计这种模式背后的主要动机是促进形成松散耦合。在这种模式中，并不是一个对象调用另一个对象的方法，而是一个对象订阅另一个对象的特定活动并在状态改变后获得通知。订阅者也称之为观察者，而被观察的对象被称为发布者或者主题。发生一个重要的事件时，发布者将会通知(调用)所有订阅者并且可能经常以事件对象的形式传递消息。</p><p>代码示例：<br>杂志订阅<br>subscribers 一个数组<br>subscribe() 将订阅者添加到subscribers数组。<br>unsubscribe() 从订阅者数组中删除订阅者。<br>publish() 循环遍历subscribers中的每个元素，并且调用他们注册时所提供的方法。</p><p>所有这三种方法都需要一个type参数，因为发布者可能触发多个事件，而其中某些用户仅订阅了一种事件。<br>由于这些成员对于任何发布者对象都是通用的，将它们作为一个独立对象的一个部分来实现是很有意义的。那样我们可以将其赋值到任何对象中，并且将任意给定的对象变成一个发布者。</p><p>下面是该通用发布者功能的一个实现示例，它定义了前面列举的所有需要的成员，还加上了一个帮助方法visitSubscribers()；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> publisher = &#123;</span><br><span class="line">  subscribers:&#123;</span><br><span class="line">    any:[] <span class="comment">//事件类型：订阅者</span></span><br><span class="line">  &#125;,</span><br><span class="line">  subscribe:<span class="function"><span class="keyword">function</span>(<span class="params">fn,type=<span class="string">'any'</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.subscribers[type] === <span class="literal">undefined</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.subscribers[type].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  unsubscribe:<span class="function"><span class="keyword">function</span>(<span class="params">fn,type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.visitSubscribers(<span class="string">'unsubscribe'</span>,fn,type);</span><br><span class="line">  &#125;,</span><br><span class="line">  publish:<span class="function"><span class="keyword">function</span>(<span class="params">publication,type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.visitSubscribers(<span class="string">'publish'</span>,publication,type);</span><br><span class="line">  &#125;,</span><br><span class="line">  visitSubscribers:<span class="function"><span class="keyword">function</span>(<span class="params">action,arg,type=<span class="string">'any'</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subscribers = <span class="keyword">this</span>.subscribers[type],i,max = subscribers.length;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>,i&lt;max;i+=<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(action===<span class="string">'publish'</span>)&#123;</span><br><span class="line">        subscribers[i](arg);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(subscribers[i]===arg)&#123;</span><br><span class="line">          subscribers.splice(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePublisher</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> publisher)&#123;</span><br><span class="line">    <span class="keyword">if</span>(publisher.hasOwnProperty(i)&amp;&amp; <span class="keyword">typeof</span> publisher[i]=== <span class="string">'function'</span>)&#123;</span><br><span class="line">      o[i] = publisher[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  o.subscribers = &#123;<span class="attr">any</span>:[]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，让我们来实现paper对象。它所能做的就是发布日报和月刊：</span></span><br><span class="line"><span class="keyword">var</span> paper = &#123;</span><br><span class="line">  daily:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.publish(<span class="string">'big news today'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  monthly:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.publish(<span class="string">'interesting analysis'</span>,<span class="string">'monthly'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将paper构造成一个发布者;</span></span><br><span class="line">makerPublisher(paper);</span><br><span class="line"><span class="keyword">var</span> joe = &#123;</span><br><span class="line">  drinkCoffee:<span class="function"><span class="keyword">function</span>(<span class="params">paper</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Just read'</span>+paper);</span><br><span class="line">  &#125;,</span><br><span class="line">  sundayPreNap:<span class="function"><span class="keyword">function</span>(<span class="params">monthly</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'About to fall asleep reading this'</span>+monthly);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">paper.subscribe(joe.drinkCoffee);</span><br><span class="line">paper.subscribe(joe.sundayPreNap,<span class="string">'monthly'</span>);</span><br><span class="line"></span><br><span class="line">paper.daily();</span><br><span class="line">paper.daily();</span><br><span class="line">paper.monthly();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;观察者(observer)模式广泛应用于客户端Javacript编程中。所有浏览器事件（鼠标悬停，按键等事件）是该模式的例子。它的另一个名字也称为自定义事件（custom evensts）,与那些浏览器事件相比，自定义事件表示是由您编程实现的事件。此外，该模式的另外一个别名
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript模式" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/javascript%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://www.zhouwenliang.com/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhouwenliang.com/迭代器模式/</id>
    <published>2019-07-26T01:44:47.000Z</published>
    <updated>2019-10-15T01:18:04.190Z</updated>
    
    <content type="html"><![CDATA[<p>在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能储存在一个复杂的数据结构内部，而要提供一种简单的方法能够访问数据结构中每个元素。对象的消费者并不知道如何组织数据，所有需要做的就是取出单个数据进行工作。</p><p>在迭代器模式中，对象需要提供一个next()方法,依次调用next()必须返回下一个连续的元素。在特定的数据结构中，‘下一个’所代表的意义是由您来决定的。</p><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> agg = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">var</span> len = data.length;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> element;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.hasNext())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      element = data[index];</span><br><span class="line">      index = index + <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125;,</span><br><span class="line">    hasNext:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> index &lt; len;</span><br><span class="line">    &#125;,</span><br><span class="line">    rewind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//恢复指针</span></span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    current:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//返回当前元素</span></span><br><span class="line">      <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在迭代器模式中，通常有一个包含某种数据集合的对象。该数据可能储存在一个复杂的数据结构内部，而要提供一种简单的方法能够访问数据结构中每个元素。对象的消费者并不知道如何组织数据，所有需要做的就是取出单个数据进行工作。&lt;/p&gt;
&lt;p&gt;在迭代器模式中，对象需要提供一个next()方
      
    
    </summary>
    
      <category term="书籍笔记" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript模式" scheme="http://www.zhouwenliang.com/categories/%E4%B9%A6%E7%B1%8D%E7%AC%94%E8%AE%B0/javascript%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>node-learn</title>
    <link href="http://www.zhouwenliang.com/node-learn/"/>
    <id>http://www.zhouwenliang.com/node-learn/</id>
    <published>2019-07-14T13:20:14.000Z</published>
    <updated>2019-08-13T08:27:15.094Z</updated>
    
    <content type="html"><![CDATA[<p>主要承诺：node 学习笔记的记录</p><p>开始时间：2019-7-15</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在开启多方便学习记录的同时，开启技术学习记录。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>尽量快速掌握node，并实践</li><li>复习该笔记。</li></ol><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ol><li>1天<ul><li></li><li></li></ul></li><li>7天</li><li>30天</li><li>60天</li><li>90天</li><li>100天</li></ol><h3 id="额外的补充"><a href="#额外的补充" class="headerlink" title="额外的补充"></a>额外的补充</h3><ul><li>难点等深度扩展，会另写一篇文章进行记录。</li></ul><h3 id="日志模板"><a href="#日志模板" class="headerlink" title="日志模板"></a>日志模板</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>## 第N天</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 今天的进步</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 思想和情绪</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>### 明天的计划</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="第1天-2019年7月15日"><a href="#第1天-2019年7月15日" class="headerlink" title="第1天 2019年7月15日"></a>第1天 2019年7月15日</h3><h4 id="今天的进步"><a href="#今天的进步" class="headerlink" title="今天的进步"></a>今天的进步</h4><h4 id="思想和情绪"><a href="#思想和情绪" class="headerlink" title="思想和情绪"></a>思想和情绪</h4><h4 id="明天的计划"><a href="#明天的计划" class="headerlink" title="明天的计划"></a>明天的计划</h4><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要承诺：node 学习笔记的记录&lt;/p&gt;
&lt;p&gt;开始时间：2019-7-15&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在开启多方便学习记录的同时，开启技术学习记录。
      
    
    </summary>
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="node" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/node/"/>
    
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue-组件设计</title>
    <link href="http://www.zhouwenliang.com/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.zhouwenliang.com/组件设计/</id>
    <published>2019-07-14T13:20:14.000Z</published>
    <updated>2019-12-04T09:15:54.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装注意-sync-修饰符，指令的灵活运用。"><a href="#封装注意-sync-修饰符，指令的灵活运用。" class="headerlink" title="封装注意 .sync 修饰符，指令的灵活运用。"></a>封装注意 .sync 修饰符，指令的灵活运用。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;封装注意-sync-修饰符，指令的灵活运用。&quot;&gt;&lt;a href=&quot;#封装注意-sync-修饰符，指令的灵活运用。&quot; class=&quot;headerlink&quot; title=&quot;封装注意 .sync 修饰符，指令的灵活运用。&quot;&gt;&lt;/a&gt;封装注意 .sync 修饰符，指令的灵
      
    
    </summary>
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="VUE" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/VUE/"/>
    
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>性能优化-SSR</title>
    <link href="http://www.zhouwenliang.com/SSR/"/>
    <id>http://www.zhouwenliang.com/SSR/</id>
    <published>2019-07-14T13:20:14.000Z</published>
    <updated>2019-12-02T02:01:59.907Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="VUE" scheme="http://www.zhouwenliang.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/VUE/"/>
    
    
      <category term="前端技术学习记录" scheme="http://www.zhouwenliang.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
